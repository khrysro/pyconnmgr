#!/usr/bin/env python

"""
    title:          Python Connections Manager

    date:           06.23.2015

    author:         Lupine  - http://www.thelupine.com

    description:    Python/GTK/Glade frontend to the SSH/SFTP, FTP, SMB, VNC, and RDP.
    
    license:        GPL3
    pyconnmgr is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    pyconnmgr is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with pyconnmgr.  If not, see <http://www.gnu.org/licenses/>.

"""

import sys, os, glob, signal, time, re, sqlite3, pexpect, gi
gi.require_version("Gtk", "3.0")
from subprocess import Popen, PIPE
from gi.repository import Gtk

APPNAME     = "pyconnmgr"
APPVERSION  = "4.0.8.DEV"
DBVERSION   = APPNAME + APPVERSION.replace(".","")
APPCONFDIR  = "/.pyconnmgr"
#GLADE_FILE  = "/usr/share/pyconnmgr/pyconnmgr.glade"
GLADE_FILE  = "glade/pyconnmgr.glade"
HOSTSFILE   = os.environ["HOME"] + APPCONFDIR + "/hostsfile.db"

print "\n\n" + APPNAME + " version " + APPVERSION + "\n"
print APPNAME + " comes with ABSOLUTELY NO WARRANTY, is licensed under the"
print "GNU GENERAL PUBLIC LICENSE and is free and open source software."
print "http://www.thelupine.com\n\n"

class ConnectionManager:
    def check_appconfig_dir(self):
        """
        This function will create the ENV HOME app config directory
        It will do so by first checking if the APPCONFDIR dir exists,
        if it does not it will be created, or give an error
        """
        appsettingsdir = os.environ["HOME"] + APPCONFDIR
        if not os.path.isdir(appsettingsdir):
            try:
                os.mkdir(appsettingsdir)
            except OSError:
                errormessage = 'Unable to create configuration directory:\n' \
                                + appsettingsdir + \
                                '\nYou will not be able to save hosts.\n\n'
                print errormessage
                self.error_message_label.set_text(errormessage)
                self.error_dialog.show()
        return appsettingsdir

    def check_sqlitedb(self):
        """
        This function will check for the sqlite3 file, and if not exist
        it will create it.  If it does exist, it will perform any DB
        updates that are needed.
        """
        if os.path.isfile(HOSTSFILE):
            sqlconn = sqlite3.connect(HOSTSFILE)
            sqlcursor = sqlconn.cursor()
            sqlcursor.execute("pragma table_info('hosts')")
            #current table schema should look like this
            """
            0|name|text|0||0
            1|tab|int|0||0
            2|sshport|int|0||0
            3|sshuser|text|0||0
            4|sshopt|text|0||0
            5|vncquality|int|0||0
            6|vnccompresslevel|int|0||0
            7|vncport|int|0||0
            8|vncpassword|text|0||0
            9|rdpgeom|text|0||0
            10|rdpuser|text|0||0
            11|rdpdom|text|0||0
            12|sftpport|int|0||0
            13|sftpuser|text|0||0
            14|sftppath|text|0||0
            15|smbuser|text|0||0
            16|smbpath|text|0||0
            17|ftpport|int|0||0
            18|ftpuser|text|0||0
            19|ftppath|text|0||0
            20|spicefull|int|0||0
            21|spicezoom|int|0||0
            22|spiceport|int|0||0
            23|<DBVERSION>|int|0||0  # this is used to keep the sql schema up to date
            """
            currentschema = str(sqlcursor.fetchall())
            #check if current schema matches, update if not
            if not re.search(DBVERSION, currentschema):
                sqlcursor.execute('''CREATE TABLE IF NOT EXISTS {} 
                                        (name text,
                                        tab int,
                                        sshport int,
                                        sshuser text,
                                        sshopt text,
                                        vncquality int,
                                        vnccompresslevel int,
                                        vncport int,
                                        vncpassword text,
                                        rdpgeom text,
                                        rdpuser text,
                                        rdpdom text,
                                        sftpport int,
                                        sftpuser text,
                                        sftppath text,
                                        smbuser text,
                                        smbpath text,
                                        ftpport int,
                                        ftpuser text,
                                        ftppath text,
                                        spicefull int,
                                        spicezoom int,
                                        spiceport int,
                                        {} int)'''.format(DBVERSION,DBVERSION))
                sqlconn.commit()
                #NOTE: DB updates are already done. Do not update the INSERT below with updated schema
                sqlcursor.execute('''INSERT INTO {} 
                                        (name,tab,sshport,sshuser,sshopt,
                                        vncquality,vnccompresslevel,vncport,vncpassword,
                                        rdpgeom,rdpuser,rdpdom,
                                        sftpport,sftpuser,sftppath,smbuser,smbpath,
                                        ftpport,ftpport,ftppath,
                                        {})
                                    SELECT name,tab,sshport,sshuser,sshopt,
                                        vncquality,vnccompresslevel,vncport,vncpassword,
                                        rdpgeom,rdpuser,rdpdom,
                                        sftpport,sftpuser,sftppath,smbuser,smbpath,
                                        ftpport,ftpport,ftppath,
                                        0 
                                    FROM hosts'''.format(DBVERSION,DBVERSION))
                sqlconn.commit()
                sqlcursor.execute('''DROP TABLE IF EXISTS hosts''')
                sqlconn.commit()
                sqlcursor.execute('''ALTER TABLE {}
                                    RENAME TO hosts'''.format(DBVERSION))
                sqlconn.commit()
                sqlconn.close
                
        else:
            try:
                sqlite3.connect(HOSTSFILE)
            except:
                errormessage = 'Unable to connect to sqlite3 file:\n' \
                                + HOSTSFILE + \
                                '\nYou will not be able to save hosts.\n\n'
                print errormessage
                self.error_message_label.set_text(errormessage)
                self.error_dialog.show()
            else:
                sqlconn = sqlite3.connect(HOSTSFILE)
                sqlcursor = sqlconn.cursor()
                sqlcursor.execute('''CREATE TABLE IF NOT EXISTS hosts 
                                        (name text,
                                        tab int,
                                        sshport int,
                                        sshuser text,
                                        sshopt text,
                                        vncquality int,
                                        vnccompresslevel int,
                                        vncport int,
                                        vncpassword text,
                                        rdpgeom text,
                                        rdpuser text,
                                        rdpdom text,
                                        sftpport int,
                                        sftpuser text,
                                        sftppath text,
                                        smbuser text,
                                        smbpath text,
                                        ftpport int,
                                        ftpuser text,
                                        ftppath text,
                                        spicefull int,
                                        spicezoom int,
                                        spiceport int,
                                        {} int)'''.format(DBVERSION))
                sqlconn.commit()
                sqlconn.close

    def read_hostsfile(self):
        """
        This function will check for the existence of a HOSTSFILE and if found,
        read in it's contents into an array after checking the table structure
        is up to date.  If not found, it will create a blank HOSTSFILE.
        """
        hostnames = []
        if os.path.isfile(HOSTSFILE):
            sqlconn = sqlite3.connect(HOSTSFILE)
            #select all hostnames, and read into an array
            for row in sqlconn.execute("SELECT name FROM hosts \
                                        ORDER BY name DESC"):
                for hostname in row:
                    if hostname:
                        hostnames.append(hostname)
            sqlconn.close
        return hostnames

    def on_del_menu_activate(self, action):
        """This function will remove a host entry from the HOSTSFILE"""
        host = self.host_entry.get_text()
        sqlconn = sqlite3.connect(HOSTSFILE)
        sqlcursor = sqlconn.cursor()
        sqlcursor.execute('DELETE FROM hosts WHERE name=?', (host,))
        sqlconn.commit()
        sqlconn.close()
        self.host_entry.set_text('')
        self.populate_cmbox_hostlist()
        self.populate_cmbox_hostlist_entry_completion()

    def update_host_settings(self):
        """This function will read HOSTSFILE, and populate the proper fields"""
        host = self.host_entry.get_text()
        sqlconn = sqlite3.connect(HOSTSFILE)
        sqlcursor = sqlconn.cursor()
        #first look through the sqlite db, and assign values to variables
        for row in sqlcursor.execute('SELECT * FROM hosts WHERE name=?', (host,)):
            if (row[1]):
                tabposition = row[1]
            else:
                tabposition = 0

            if (row[2]):
                hostsshport = row[2]
            else:
                hostsshport = 22

            if (row[3]):
                hostsshuser = row[3]
            else:
                hostsshuser = ""

            if (row[4]):
                hostsshopt = row[4]
            else:
                hostsshopt = ""

            if (row[5]):
                hostvncquality = row[5]
            else:
                hostvncquality = 9

            if (row[6]):
                hostvnccompresslevel = row[6]
            else:
                hostvnccompresslevel = 9

            if (row[7]):
                hostvncport = row[7]
            else:
                hostvncport = 5900

            if (row[8]):
                hostvncpassword = row[8]
            else:
                hostvncpassword = ""

            if (row[9]):
                hostrdpgeom = row[9]
            else:
                hostrdpgeom = ""

            if (row[10]):
                hostrdpuser = row[10]
            else:
                hostrdpuser = ""

            if (row[11]):
                hostrdpdom = row[11]
            else:
                hostrdpdom = ""

            if (row[12]):
                hostsftpport = row[12]
            else:
                hostsftpport = 22

            if (row[13]):
                hostsftpuser = row[13]
            else:
                hostsftpuser = ""

            if (row[14]):
                hostsftppath = row[14]
            else:
                hostsftppath = ""

            if (row[15]):
                hostsmbuser = row[15]
            else:
                hostsmbuser = ""

            if (row[16]):
                hostsmbpath = row[16]
            else:
                hostsmbpath = ""

            if (row[17]):
                hostftpport = row[17]
            else:
                hostftpport = 21

            if (row[18]):
                hostftpuser = row[18]
            else:
                hostftpuser = ""

            if (row[19]):
                hostftppath = row[19]
            else:
                hostftppath = ""

            if (row[20]):
                self.spice_fullscreen_checkbutton.set_active(True)
            else:
                hostspicefull = ''

            if (row[21]):
                hostspicezoom = row[21]
            else:
                hostspicezoom = 100

            if (row[22]):
                hostspiceport = row[22]
            else:
                hostspiceport = 5900

            #update the widgets with the above variables
            self.tabbed_notebook.set_current_page(tabposition)
            #SSH
            self.ssh_port_sbtn.set_text(str(hostsshport))
            self.ssh_port_sbtn.set_value(hostsshport)
            self.ssh_user_entry.set_text(hostsshuser)
            self.ssh_options_entry.set_text(hostsshopt)
            #SFTP
            self.sftp_port_sbtn.set_text(str(hostsftpport))
            self.sftp_port_sbtn.set_value(hostsftpport)
            self.sftp_user_entry.set_text(hostsftpuser)
            self.sftp_path_entry.set_text(hostsftppath)
            #VNC
            self.vnc_quality_sbtn.set_text(str(hostvncquality))
            self.vnc_quality_sbtn.set_value(hostvncquality)
            self.vnc_compress_sbtn.set_text(str(hostvnccompresslevel))
            self.vnc_compress_sbtn.set_value(hostvnccompresslevel)
            self.vnc_port_sbtn.set_text(str(hostvncport))
            self.vnc_port_sbtn.set_value(hostvncport)
            self.vnc_password_entry.set_text(hostvncpassword)
            #RDP
            self.rdp_geometry_entry.set_text(hostrdpgeom)
            self.rdp_user_entry.set_text(hostrdpuser)
            self.rdp_domain_entry.set_text(hostrdpdom)
            #SMB
            self.smb_user_entry.set_text(hostsmbuser)
            self.smb_path_entry.set_text(hostsmbpath)
            #FTP
            self.ftp_port_sbtn.set_text(str(hostftpport))
            self.ftp_port_sbtn.set_value(hostftpport)
            self.ftp_user_entry.set_text(hostftpuser)
            self.ftp_path_entry.set_text(hostftppath)
            #SPICE
            self.spice_zoom_spinbutton.set_text(str(hostspicezoom))
            self.spice_zoom_spinbutton.set_value(hostspicezoom)
            self.spice_port_spinbutton.set_text(str(hostspiceport))
            self.spice_port_spinbutton.set_value(hostspiceport)
        sqlconn.close

    def on_host_entry_changed(self, action):
        """This function will call to the update_host_settings function"""
        self.update_host_settings()

    def update_host_info(self,host,sshport,sshuser,sshoptions, \
        vncquality,vnccompresslevel,vncport,vncpasswd, \
        rdpgeometry,rdpuser,rdpdomain,selectedtab,sftpport,sftpuser,sftppath, \
        smbuser,smbpath,ftpport,ftpuser,ftppath,spicefull,spicezoom,spiceport):
        """This function will update host information to the HOSTSFILE"""
        sqlconn = sqlite3.connect(HOSTSFILE)
        sqlcursor = sqlconn.cursor()
        #we'll need to determine if this will be a sql UPDATE or sql INSERT
        foundhost = "no"
        hostnames = self.read_hostsfile()
        for hostname in hostnames:
            if hostname == host:
                foundhost = "yes"
                #host already exist, so update information
                values = (selectedtab,sshport,sshuser,sshoptions, \
                        vncquality,vnccompresslevel,vncport,vncpasswd, \
                        rdpgeometry,rdpuser,rdpdomain, \
                        sftpport,sftpuser,sftppath,smbuser,smbpath, \
                        ftpport,ftpuser,ftppath, \
                        spicefull,spicezoom,spiceport,host)
                sqlcursor.execute('''
                        UPDATE hosts SET
                                tab=?,
                                sshport=?,
                                sshuser=?,
                                sshopt=?,
                                vncquality=?,
                                vnccompresslevel=?,
                                vncport=?,
                                vncpassword=?,
                                rdpgeom=?,
                                rdpuser=?,
                                rdpdom=?,
                                sftpport=?,
                                sftpuser=?,
                                sftppath=?,
                                smbuser=?,
                                smbpath=?,
                                ftpport=?,
                                ftpuser=?,
                                ftppath=?,
                                spicefull=?,
                                spicezoom=?,
                                spiceport=?
                        WHERE name=? ''', values)
        if foundhost == "no":
            #host didn't exist, so insert new host information
            sqlcursor.execute('''
                    INSERT INTO hosts VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
                    ''',(host,selectedtab,sshport,sshuser,sshoptions, \
                    vncquality,vnccompresslevel,vncport,vncpasswd, \
                    rdpgeometry,rdpuser,rdpdomain,sftpport,sftpuser, \
                    sftppath,smbuser,smbpath,ftpport,ftpuser,ftppath,0, \
                    spicefull,spicezoom,spiceport) )
        #update and close the database
        sqlconn.commit()
        sqlconn.close()

    def populate_cmbox_hostlist(self):
        """Read in the HOSTSFILE and populate the drop down hosts list"""
        hostnames = self.read_hostsfile()
        hosts = Gtk.ListStore(str)
        for hostname in hostnames:
            hosts.prepend ([hostname])
        self.host_entry_cmbox.set_model(hosts)
        self.host_entry_cmbox.set_entry_text_column(0)

    def populate_cmbox_hostlist_entry_completion(self):
        """Read in the HOSTSFILE and populate the entry completion"""
        hostnames = self.read_hostsfile()
        completion = Gtk.EntryCompletion()
        hosts = Gtk.ListStore(str)
        for hostname in hostnames:
            iter = hosts.append()
            hosts.set(iter, 0, hostname)
        self.host_entry.set_completion(completion)
        completion.set_model(hosts)
        completion.set_text_column(0)

    def on_hosts_dialog_delete_event(self, widget, event=None):
        """This will hide the Edit -> Hosts dialog"""
        self.hosts_dialog.hide()
        return True

    def on_hosts_cancel_btn_clicked(self, widget, data=None):
        """This will hide the Edit -> Hosts dialog"""
        self.hosts_dialog.hide()

    def on_hosts_menu_find_activate(self, action):
        """This will display the hosts->find dialog"""
        self.find_dialog_find_entry.set_text('')
        txtbuffer = self.hosts_txtview.get_buffer()
        start, end = txtbuffer.get_bounds()
        txtbuffer.remove_all_tags(start, end)
        self.find_dialog.show()

    def on_find_dialog_ok_button_clicked(self, action):
        """This will highlight each found entry"""
        findentry = self.find_dialog_find_entry.get_text()
        txtbuffer = self.hosts_txtview.get_buffer()
        found_tag = txtbuffer.create_tag(foreground='red', background='black')
        start = txtbuffer.get_start_iter()
        first, last = start.forward_search(findentry, Gtk.TEXT_SEARCH_TEXT_ONLY)
        if first:
            self.hosts_txtview.scroll_to_iter(first, 0.0)
            txtbuffer.place_cursor(first)
            txtbuffer.apply_tag(found_tag, first, last)
        self.find_dialog.hide()

    def on_hosts_menu_cut_activate(self, action):
        """This will cut an entry"""
        buffer = self.hosts_txtview.get_buffer()
        buffer.cut_clipboard(clipboard, self.hosts_txtview.get_editable());

    def on_hosts_menu_copy_activate(self, action):
        """This will copy an entry"""
        buffer = self.hosts_txtview.get_buffer()
        buffer.copy_clipboard (Gtk.clipboard_get());

    def on_hosts_menu_paste_activate(self, action):
        """This will paste an entry"""
        buffer = self.hosts_txtview.get_buffer()
        buffer.paste_clipboard (Gtk.clipboard_get(), None, True);

    def on_hosts_menu_delete_activate(self, action):
        """This will paste an entry"""
        buffer = self.hosts_txtview.get_buffer()
        buffer.delete_selection (False, True);

    def on_find_dialog_cancel_button_clicked(self, action):
        """This will hide the hosts->find dialog"""
        self.find_dialog.hide()

    def on_find_dialog_delete_event(self, widget, event=None):
        """This will hide the hosts->find dialog"""
        self.find_dialog.hide()
        return True

    def on_hosts_apply_btn_clicked(self, child):
        """This will update the HOSTSFILE with everything in the TextView"""
        hostnames = self.read_hostsfile()
        hosts = self.hosts_txtview.get_buffer()
        bufferhostnames = hosts.get_text(hosts.get_start_iter(), \
                            hosts.get_end_iter())
        newhostnames = bufferhostnames.split('\n')
        ##dual-forloops to check the hostnames against the newhostnames
        for hostname in hostnames:
            foundnewhostname = 0
            for newhostname in newhostnames:
                if re.search(hostname, newhostname):
                    foundnewhostname = 1
            if not foundnewhostname:
                print "Deleteing " + hostname + " from sqlite3\n"
                sqlconn = sqlite3.connect(HOSTSFILE)
                sqlcursor = sqlconn.cursor()
                sqlcursor.execute('DELETE FROM hosts WHERE name=?', (hostname,))
                sqlconn.commit()
                sqlconn.close()
        self.populate_cmbox_hostlist()
        self.populate_cmbox_hostlist_entry_completion()
        self.hosts_dialog.hide()

    def on_about_menu_activate(self, widget, data=None):
        """This will show the ABOUT dialog"""
        self.label_version.set_markup('<span weight="bold" size="larger"> ' \
                                        + APPNAME + ' ' + 'v' + APPVERSION \
                                        + '</span>')
        self.about_dialog.show()

    def on_about_dialog_delete_event(self, widget, event=None):
        """This will close the ABOUT dialog"""
        self.about_dialog.hide()
        return True

    def on_about_close_button_clicked(self, widget, data=None):
        """This will close the ABOUT dialog"""
        self.about_dialog.hide()

    def on_error_button_clicked(self, action):
        """This will close the Error dialog"""
        self.error_dialog.hide()

    def on_error_dialog_delete_event(self, widget, event=None):
        """This will close the Error dialog"""
        self.error_dialog.hide()
        return True

    def on_hosts_menu_activate(self, action):
        """This function will activate the Edit -> Hosts menu item"""
        self.hosts_txtview.set_buffer(None)
        sqlconn = sqlite3.connect(HOSTSFILE)
        dbhosts = []
        for row in sqlconn.execute("SELECT name FROM hosts ORDER BY name ASC"):
            for hostname in row:
                dbhosts.append(hostname + "\n")
            sqlconn.close
        hosts = self.hosts_txtview.get_buffer()
        iter = hosts.get_iter_at_offset(0)
        for dbhost in dbhosts:
            hosts.insert(iter, dbhost)
        self.hosts_dialog.show()

    def on_connect_btn_clicked(self, child):
        """This will first determine what tab you are on, and then
            launch the necessary app"""
        selectedtab = self.tabbed_notebook.get_current_page()
        host = self.host_entry.get_text()
        sshport = self.ssh_port_sbtn.get_text()
        sshuser = self.ssh_user_entry.get_text()
        sshoptions = self.ssh_options_entry.get_text()
        sftpport = self.sftp_port_sbtn.get_text()
        sftpuser = self.sftp_user_entry.get_text()
        sftppath = self.sftp_path_entry.get_text()
        vncquality = self.vnc_quality_sbtn.get_text()
        vnccompresslevel = self.vnc_compress_sbtn.get_text()
        vncport = self.vnc_port_sbtn.get_text()
        vncpasswd = self.vnc_password_entry.get_text()
        rdpgeometry = self.rdp_geometry_entry.get_text()
        rdpuser = self.rdp_user_entry.get_text()
        rdpdomain = self.rdp_domain_entry.get_text()
        smbuser = self.smb_user_entry.get_text()
        smbpath = self.smb_path_entry.get_text()
        ftpport = self.ftp_port_sbtn.get_text()
        ftpuser = self.ftp_user_entry.get_text()
        ftppath = self.ftp_path_entry.get_text()
        spicefull = self.spice_fullscreen_checkbutton.get_active()
        spicefullvalue = ''
        spicezoom = self.spice_zoom_spinbutton.get_text()
        spiceport = self.spice_port_spinbutton.get_text()
        
        if len(host) != 0:
            if selectedtab == 0:
                #we are on the SSH tab
                sshuserhost = 'ssh ' + sshoptions + ' -p ' + sshport + \
                                ' ' + sshuser + "@" + host
                command = ['gnome-terminal', '--geometry', '110x25', \
                            host, '-e', sshuserhost]
                commandspawn = Popen(command)
            elif selectedtab == 1:
                #we are on the SFTP tab
                nautilusURI = 'sftp://' + sftpuser + '@' + host + ":" + \
                                sftpport + sftppath
                command = ['nautilus', nautilusURI]
                commandspawn = Popen(command)
            elif selectedtab == 2:
                #we are on the VNC tab
                vnchostport = host + ":" + vncport
                command = ['vncviewer', \
                            '-QualityLevel', vncquality, \
                            '-CompressLevel', vnccompresslevel]
                if vncpasswd:
                    vncpassdwfile = os.environ["HOME"] + APPCONFDIR + '/vncpasswd.tmp'
                    child = pexpect.spawn('vncpasswd ' + vncpassdwfile )
                    child.expect('Password:')
                    child.sendline(vncpasswd)
                    child.expect('Verify:')
                    child.sendline(vncpasswd)
                    child.expect('Would you like to enter a view-only password')
                    child.sendline('n')
                    child.expect(pexpect.EOF, timeout=None)
                    command.append('-PasswordFile')
                    command.append(vncpassdwfile)
                command.append(vnchostport)
                commandspawn = Popen(command)
            elif selectedtab == 3:
                #we are on the RDP tab
                command = ['xfreerdp']
                if len(rdpuser) != 0:
                    command.append('-u')
                    command.append(rdpuser)
                if len(rdpdomain) != 0:
                    command.append('-d')
                    command.append(rdpdomain)
                if rdpgeometry == 'FULLSCREEN':
                    command.append('-f')
                else:
                    command.append('-g')
                    command.append(rdpgeometry)
                command.append(host)
                #due to m$ licsening change for 2008+ servers, we now need this:
                mslicfile = os.environ["HOME"] + "/.freerdp/licence.*"
                for x in glob.glob(mslicfile):
                    os.unlink(x)
                commandspawn = Popen(command)
            elif selectedtab == 4:
                #we are on the SMB tab
                nautilusURI = 'smb://' + smbuser + '@' + host + "/" + smbpath
                command = ['nautilus', nautilusURI]
                commandspawn = Popen(command)
            elif selectedtab == 5:
                #we are on the FTP tab
                nautilusURI = 'ftp://' + ftpuser + '@' + host + ":" + \
                                ftpport + ftppath
                command = ['nautilus', nautilusURI]
                commandspawn = Popen(command)
            elif selectedtab == 6:
                #we are on the SPICE tab
                remoteURI = 'spice://' + host + ":" + spiceport 
                command = ['remote-viewer', '-z', spicezoom, remoteURI]
                if spicefull:
                    command.append('-f')
                    spicefullvalue = 1
                commandspawn = Popen(command)
            
            #now that the command has launched, update the sqlite db
            self.update_host_info(host,sshport,sshuser,sshoptions, \
                vncquality,vnccompresslevel,vncport,vncpasswd, \
                rdpgeometry,rdpuser,rdpdomain,selectedtab, \
                sftpport,sftpuser,sftppath,smbuser,smbpath, \
                ftpport,ftpuser,ftppath,spicefullvalue,spicezoom,spiceport)
            self.populate_cmbox_hostlist()
            self.populate_cmbox_hostlist_entry_completion()
        else:
            errormessage = 'I need a host!!!  Please enter the IP or \
                            DNS name of a host in the HOST: field.'
            print errormessage
            self.error_message_textview.set_text(errormessage)
            self.error_dialog.show()

    def __init__(self):
        gtkbuilder = Gtk.Builder()
        gtkbuilder.add_from_file(GLADE_FILE)

        #initialize the glade objects
        self.label_version = gtkbuilder.get_object('label_version')
        self.about_dialog = gtkbuilder.get_object('about_dialog')
        self.host_entry = gtkbuilder.get_object('host_entry')
        self.host_entry_cmbox = gtkbuilder.get_object('host_entry_cmbox')
        self.host_entrycompletion = gtkbuilder.get_object \
                                                ('host_entrycompletion')
        self.ssh_port_sbtn = gtkbuilder.get_object('ssh_port_sbtn')
        self.ssh_user_entry = gtkbuilder.get_object('ssh_user_entry')
        self.ssh_options_entry = gtkbuilder.get_object('ssh_options_entry')
        self.sftp_port_sbtn = gtkbuilder.get_object('sftp_port_sbtn')
        self.sftp_user_entry = gtkbuilder.get_object('sftp_user_entry')
        self.sftp_path_entry = gtkbuilder.get_object('sftp_path_entry')
        self.vnc_quality_sbtn = gtkbuilder.get_object('vnc_quality_sbtn')
        self.vnc_compress_sbtn = gtkbuilder.get_object('vnc_compress_sbtn')
        self.vnc_port_sbtn = gtkbuilder.get_object('vnc_port_sbtn')
        self.vnc_password_entry = gtkbuilder.get_object('vnc_password_entry')
        self.rdp_geometry_cmbox = gtkbuilder.get_object('rdp_geometry_cmbox')
        self.rdp_geometry_entry = gtkbuilder.get_object('rdp_geometry_entry')
        self.rdp_user_entry = gtkbuilder.get_object('rdp_user_entry')
        self.rdp_domain_entry = gtkbuilder.get_object('rdp_domain_entry')
        self.smb_user_entry = gtkbuilder.get_object('smb_user_entry')
        self.smb_path_entry = gtkbuilder.get_object('smb_path_entry')
        self.ftp_port_sbtn = gtkbuilder.get_object('ftp_port_sbtn')
        self.ftp_user_entry = gtkbuilder.get_object('ftp_user_entry')
        self.ftp_path_entry = gtkbuilder.get_object('ftp_path_entry')
        self.spice_fullscreen_checkbutton = gtkbuilder.get_object('spice_fullscreen_checkbutton')
        self.spice_zoom_spinbutton = gtkbuilder.get_object('spice_zoom_spinbutton')
        self.spice_port_spinbutton = gtkbuilder.get_object('spice_port_spinbutton')
        self.hosts_dialog = gtkbuilder.get_object('hosts_dialog')
        self.hosts_txtview = gtkbuilder.get_object('hosts_txtview')
        self.find_dialog_find_entry = gtkbuilder.get_object \
                                                ('find_dialog_find_entry')
        self.find_dialog = gtkbuilder.get_object('find_dialog')
        self.error_dialog = gtkbuilder.get_object('error_dialog')
        self.error_message_label = gtkbuilder.get_object('error_message_label')
        self.error_dialog = gtkbuilder.get_object('error_dialog')
        self.tabbed_notebook = gtkbuilder.get_object('tabbed_notebook')

        #perform some initialization functions
        self.check_appconfig_dir()
        self.check_sqlitedb()
        self.read_hostsfile()

        signals = {
            'on_main_dialog_destroy' : Gtk.main_quit,
            'on_cancel_btn_clicked' : Gtk.main_quit,
            'on_quit_menu_activate' : Gtk.main_quit,
            'on_hosts_menu_quit_activate' : self.on_hosts_cancel_btn_clicked,
            'on_connect_btn_clicked' : self.on_connect_btn_clicked,
            'on_host_entry_activate' : self.on_connect_btn_clicked,
            'on_ssh_user_entry_activate' : self.on_connect_btn_clicked,
            'on_ssh_options_entry_activate' : self.on_connect_btn_clicked,
            'on_ssh_port_sbtn_activate' : self.on_connect_btn_clicked,
            'on_sftp_user_entry_activate' : self.on_connect_btn_clicked,
            'on_sftp_port_sbtn_activate' : self.on_connect_btn_clicked,
            'on_sftp_path_entry_activate' : self.on_connect_btn_clicked,
            'on_vnc_password_entry_activate' : self.on_connect_btn_clicked,
            'on_vnc_port_sbtn_activate' : self.on_connect_btn_clicked,
            'on_vnc_quality_sbtn_activate' : self.on_connect_btn_clicked,
            'on_vnc_compress_sbtn_activate' : self.on_connect_btn_clicked,
            'on_rdp_user_entry_activate' : self.on_connect_btn_clicked,
            'on_rdp_domain_entry_activate' : self.on_connect_btn_clicked,
            'on_rdp_geometry_entry_activate' : self.on_connect_btn_clicked,
            'on_smb_user_entry_activate' : self.on_connect_btn_clicked,
            'on_smb_path_entry_activate' : self.on_connect_btn_clicked,
            'on_ftp_user_entry_activate' : self.on_connect_btn_clicked,
            'on_ftp_port_sbtn_activate' : self.on_connect_btn_clicked,
            'on_ftp_path_entry_activate' : self.on_connect_btn_clicked,
            'on_hosts_cancel_btn_clicked' : self.on_hosts_cancel_btn_clicked,
            'on_hosts_apply_btn_clicked' : self.on_hosts_apply_btn_clicked,
            'on_hosts_menu_save_activate' : self.on_hosts_apply_btn_clicked,
            'on_hosts_menu_find_activate' : self.on_hosts_menu_find_activate,
            'on_hosts_menu_cut_activate' : self.on_hosts_menu_cut_activate,
            'on_hosts_menu_copy_activate' : self.on_hosts_menu_copy_activate,
            'on_hosts_menu_paste_activate' : self.on_hosts_menu_paste_activate,
            'on_del_menu_activate' : self.on_del_menu_activate,
            'on_hosts_menu_activate' : self.on_hosts_menu_activate,
            'on_hosts_dialog_delete_event' : self.on_hosts_dialog_delete_event,
            'on_about_menu_activate' : self.on_about_menu_activate,
            'on_about_close_button_clicked' : \
                                    self.on_about_close_button_clicked,
            'on_about_dialog_delete_event' : self.on_about_dialog_delete_event,
            'on_find_dialog_ok_button_clicked' : \
                                    self.on_find_dialog_ok_button_clicked,
            'on_find_dialog_find_entry_activate' : \
                                    self.on_find_dialog_ok_button_clicked,
            'on_find_dialog_cancel_button_clicked' : \
                                    self.on_find_dialog_cancel_button_clicked,
            'on_find_dialog_delete_event' : self.on_find_dialog_delete_event,
            'on_error_button_clicked' : self.on_error_button_clicked,
            'on_error_dialog_delete_event' : self.on_error_dialog_delete_event,
            'on_host_entry_changed' : self.on_host_entry_changed}
        gtkbuilder.connect_signals(signals)
        self.populate_cmbox_hostlist()
        self.populate_cmbox_hostlist_entry_completion()

if __name__ == "__main__":
    connectionmanager = ConnectionManager()
    Gtk.main()

